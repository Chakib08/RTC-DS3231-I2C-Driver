From 97e7e2e562d39cb771f3dad61ec85b1c2ad6d04d Mon Sep 17 00:00:00 2001
From: Mohamed Lamine Kartobi <chakibdace@gmail.com>
Date: Sun, 30 Apr 2023 18:11:20 +0200
Subject: [PATCH] DS3231 RTC Jetson nano driver v1.0

---
 .../tegra210-porg-p3448-rtc-ds3231-a00.dtsi   |  20 +++
 .../tegra210-p3448-0000-p3449-0000-b00.dts    |   2 +
 .../arch/arm64/configs/tegra_defconfig        |   2 +
 kernel/nvidia/drivers/media/i2c/Kconfig       |   8 +
 kernel/nvidia/drivers/media/i2c/Makefile      |   1 +
 kernel/nvidia/drivers/media/i2c/ds3231.c      | 152 ++++++++++++++++++
 6 files changed, 185 insertions(+)
 create mode 100644 hardware/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-p3448-rtc-ds3231-a00.dtsi
 create mode 100644 kernel/nvidia/drivers/media/i2c/ds3231.c

diff --git a/hardware/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-p3448-rtc-ds3231-a00.dtsi b/hardware/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-p3448-rtc-ds3231-a00.dtsi
new file mode 100644
index 00000000..bc00f841
--- /dev/null
+++ b/hardware/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-p3448-rtc-ds3231-a00.dtsi
@@ -0,0 +1,20 @@
+#include <dt-bindings/platform/t210/t210.h>
+
+/ {
+i2c@7000c400 {
+    status = "okay";
+    ds3231: rtc@68 {
+        compatible = "maxim,ds3231";
+        reg = <0x68>;
+        #clock-cells = <0>;
+        status = "okay";
+    };
+
+   eeprom_a@57{
+	compatible = "atmel,24c32";
+	reg = <0x57>;
+	pagesize = <32>;
+	status = "okay";
+	    };
+    };
+};
diff --git a/hardware/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-0000-p3449-0000-b00.dts b/hardware/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-0000-p3449-0000-b00.dts
index 217c07ba..80b39cfa 100644
--- a/hardware/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-0000-p3449-0000-b00.dts
+++ b/hardware/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-0000-p3449-0000-b00.dts
@@ -24,6 +24,8 @@
 #include "porg-platforms/tegra210-porg-pinmux-p3448-0000-b00.dtsi"
 #include "porg-platforms/tegra210-porg-gpio-p3448-0000-b00.dtsi"
 #include "porg-platforms/tegra210-porg-p3448-emc-a00.dtsi"
+#include "porg-platforms/tegra210-porg-p3448-rtc-ds3231-a00.dtsi"
+
 
 / {
 	model = "NVIDIA Jetson Nano Developer Kit";
diff --git a/kernel/kernel-4.9/arch/arm64/configs/tegra_defconfig b/kernel/kernel-4.9/arch/arm64/configs/tegra_defconfig
index 8ab7fb98..107dece2 100644
--- a/kernel/kernel-4.9/arch/arm64/configs/tegra_defconfig
+++ b/kernel/kernel-4.9/arch/arm64/configs/tegra_defconfig
@@ -634,6 +634,7 @@ CONFIG_I2C_TEGRA_CAMRTC=y
 CONFIG_I2C_TEGRA194_SLAVE=m
 CONFIG_I2C_STUB=m
 CONFIG_I2C_SLAVE_EEPROM=m
+CONFIG_EEPROM_AT24=y
 CONFIG_SPI=y
 CONFIG_SPI_CADENCE=m
 CONFIG_SPI_PXA2XX=m
@@ -775,6 +776,7 @@ CONFIG_VIDEO_LT6911UXC=y
 CONFIG_I2C_IOEXPANDER_SER_MAX9295=y
 CONFIG_I2C_IOEXPANDER_DESER_MAX9296=y
 CONFIG_VIDEO_IMX390=y
+CONFIG_RTC_DS3231=y
 CONFIG_VIDEO_IMX204=y
 # CONFIG_VGA_ARB is not set
 CONFIG_DRM=y
diff --git a/kernel/nvidia/drivers/media/i2c/Kconfig b/kernel/nvidia/drivers/media/i2c/Kconfig
index 326dbb09..e5b475cd 100644
--- a/kernel/nvidia/drivers/media/i2c/Kconfig
+++ b/kernel/nvidia/drivers/media/i2c/Kconfig
@@ -165,6 +165,14 @@ config VIDEO_IMX390
 	  To compile this driver as a module, choose M here: the module
 	  will be called imx390.
 
+config RTC_DS3231
+	tristate "Real Time Clock DS3231"
+	depends on I2C
+	---help---
+	  If you say yes here you get support for the DS3231 Real Time Clock.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called ds3231.
 endmenu
 
 endif
diff --git a/kernel/nvidia/drivers/media/i2c/Makefile b/kernel/nvidia/drivers/media/i2c/Makefile
index c6d34e80..44fe4160 100644
--- a/kernel/nvidia/drivers/media/i2c/Makefile
+++ b/kernel/nvidia/drivers/media/i2c/Makefile
@@ -21,3 +21,4 @@ obj-$(CONFIG_VIDEO_LT6911UXC) +=lt6911uxc.o
 obj-$(CONFIG_I2C_IOEXPANDER_SER_MAX9295) += max9295.o
 obj-$(CONFIG_I2C_IOEXPANDER_DESER_MAX9296) += max9296.o
 obj-$(CONFIG_VIDEO_IMX390) += imx390.o
+obj-$(CONFIG_RTC_DS3231) += ds3231.o
diff --git a/kernel/nvidia/drivers/media/i2c/ds3231.c b/kernel/nvidia/drivers/media/i2c/ds3231.c
new file mode 100644
index 00000000..b7d08c18
--- /dev/null
+++ b/kernel/nvidia/drivers/media/i2c/ds3231.c
@@ -0,0 +1,152 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * DS3231 I2C Real Time Clock driver
+ */
+
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/rtc.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/bcd.h>
+
+#define RTC_DRV_DS3231 "ds3231"
+
+#define DS3231_REG_SECONDS 0x00
+#define DS3231_REG_MINUTES 0x01
+#define DS3231_REG_HOURS 0x02
+#define DS3231_REG_DAY 0x03
+#define DS3231_REG_DATE 0x04
+#define DS3231_REG_MONTH 0x05
+#define DS3231_REG_YEAR 0x06
+
+struct ds3231_data
+{
+    struct i2c_client *client;
+    struct rtc_device *rtc;
+};
+
+static const struct of_device_id ds3231_of_match[] = {
+    {.compatible = "maxim,ds3231"},
+    {},
+};
+MODULE_DEVICE_TABLE(of, ds3231_of_match);
+
+static int ds3231_read_time(struct device *dev, struct rtc_time *tm)
+{
+    struct ds3231_data *data = dev_get_drvdata(dev);
+    struct i2c_client *client = data->client;
+    u8 buf[7];
+
+    /* Read RTC time registers */
+    if (i2c_smbus_read_i2c_block_data(client, DS3231_REG_SECONDS, 7, buf) < 0)
+        return -EIO;
+
+    /* Convert RTC time to Linux format */
+    tm->tm_sec = bcd2bin(buf[0] & 0x7f);
+    tm->tm_min = bcd2bin(buf[1] & 0x7f);
+    tm->tm_hour = bcd2bin(buf[2] & 0x3f);
+    tm->tm_mday = bcd2bin(buf[4] & 0x3f);
+    tm->tm_mon = bcd2bin(buf[5] & 0x1f) - 1;
+    tm->tm_year = bcd2bin(buf[6]) + 100;
+
+    return 0;
+}
+
+static int ds3231_set_time(struct device *dev, struct rtc_time *tm)
+{
+    struct ds3231_data *data = dev_get_drvdata(dev);
+    struct i2c_client *client = data->client;
+    u8 buf[7];
+
+    /* Convert Linux format time to RTC format */
+    buf[0] = bin2bcd(tm->tm_sec);
+    buf[1] = bin2bcd(tm->tm_min);
+    buf[2] = bin2bcd(tm->tm_hour);
+    buf[3] = bin2bcd(tm->tm_wday + 1);
+    buf[4] = bin2bcd(tm->tm_mday);
+    buf[5] = bin2bcd(tm->tm_mon + 1);
+    buf[6] = bin2bcd(tm->tm_year - 100);
+
+    /* Write RTC time registers */
+    if (i2c_smbus_write_i2c_block_data(client, DS3231_REG_SECONDS, 7, buf) < 0)
+        return -EIO;
+
+    return 0;
+}
+
+static const struct rtc_class_ops ds3231_rtc_ops = {
+    .read_time = ds3231_read_time,
+    .set_time = ds3231_set_time,
+};
+
+static int ds3231_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+    struct ds3231_data *data;
+    struct rtc_device *rtc;
+    int ret;
+
+    dev_info(&client->dev, "[DS3231] probing \n");
+
+    data = devm_kzalloc(&client->dev, sizeof(struct ds3231_data), GFP_KERNEL);
+    if (!data)
+    {
+        dev_err(&client->dev, "Failed to allocate memory\n");
+        return -ENOMEM;
+    }
+
+    data->client = client;
+
+    i2c_set_clientdata(client, data);
+
+    rtc = rtc_device_register(client->name, &client->dev, &ds3231_rtc_ops, THIS_MODULE);
+    if (IS_ERR(rtc))
+    {
+        ret = PTR_ERR(rtc);
+        dev_err(&client->dev, "Failed to register rtc device\n");
+        return ret;
+    }
+
+    data->rtc = rtc;
+
+    rtc_update_irq(data->rtc, 1, RTC_AF | RTC_UF);
+
+    if (ret < 0)
+    {
+        dev_err(&client->dev, "Failed to update RTC IRQ\n");
+        return ret;
+    }
+
+    dev_info(&client->dev, "DS3231 RTC driver initialized\n");
+
+    return 0;
+}
+
+static int ds3231_remove(struct i2c_client *client)
+{
+    struct ds3231_data *data = i2c_get_clientdata(client);
+
+    rtc_device_unregister(data->rtc);
+
+    return 0;
+}
+
+static const struct i2c_device_id ds3231_id[] = {
+    {"ds3231", 0},
+    {}};
+
+static struct i2c_driver ds3231_driver = {
+    .driver = {
+        .name = "ds3231",
+        .of_match_table = ds3231_of_match,
+    },
+    .probe = ds3231_probe,
+    .remove = ds3231_remove,
+    .id_table = ds3231_id,
+};
+
+module_i2c_driver(ds3231_driver);
+
+MODULE_AUTHOR("Mohamed Lamine Kartobi");
+MODULE_DESCRIPTION("DS3231 RTC driver");
+MODULE_LICENSE("GPL");
-- 
2.17.1

